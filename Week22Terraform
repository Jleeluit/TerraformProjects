/* 
Name: Week 22 - How to Deploy Two-Tier AWS Architecture with Terraform?
We are to create A highly available two-tier AWS architecture can be created by creating a 
custom VPC with two public subnets for the web server tier and two private subnets for the RDS tier. 
An internet-facing application load balancer is also created to distribute traffic to the web servers. 
Custom modules are used to build out the code for repeatability. Terraform Cloud is used as a CI/CD tool to 
check the build and push the code to GitHub. The ALB security group is configured with needed permissions and 
modifications are made to the web servers security group to reflect the new architecture.*/

#Terraform configuration that defines a workspace named "TerraformWeek22WorkSpace" in the organization "Jlee7".
#terraform.tf
terraform {
  cloud {
    organization = "Jlee7"

    workspaces {
      name = "TerraformWeek22WorkSpace"
    }
  }
}

#Terraform configuration that defines the required providers and the required version of Terraform.
#providers.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }

  required_version = ">= 1.3.0"
}

provider "aws" {
  region = "us-east-1"
}


# #Terraform configuration that defines an Amazon Web Services (AWS) Virtual Private Cloud (VPC).
resource "aws_vpc" "main" {
  cidr_block       = "10.10.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "2TierArchitecture"
  }
}


# Terraform configuration that defines an Amazon Web Services (AWS) EC2 instance.
#linux2AMI
resource "aws_instance" "web_tier1" {
  ami                         = "ami-0715c1897453cabd1"
  key_name                    = "Project4EC2"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.public1.id
  instance_type               = "t2.micro"
  vpc_security_group_ids      = [aws_security_group.web_tier.id]
  user_data                   = <<-EOF
        #!/bin/bash
        yum update -y
        yum install httpd -y
        systemctl start httpd
        systemctl enable httpd
        echo "<html><body><h1>Welcome to AWS WebTier One 2023! Powered byTerraform 
        </h1></body></html>" > /var/www/html/index.html
        EOF
}

# Terraform configuration that defines an Amazon Web Services (AWS) EC2 instance.
resource "aws_instance" "web_tier2" {
  ami                         = "ami-0715c1897453cabd1"
  key_name                    = "Project4EC2"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.public2.id
  instance_type               = "t2.micro"
  vpc_security_group_ids      = [aws_security_group.web_tier.id]
  user_data                   = <<-EOF
        #!/bin/bash
        yum update -y
        yum install httpd -y
        systemctl start httpd
        systemctl enable httpd
        echo "<html><body><h1>Welcome to AWS WebTier Two 2023!!! Powered by Terrafrom 
        </h1></body></html>" > /var/www/html/index.html
        EOF
}


# Create a Load Balancer
resource "aws_lb" "myalb" {
  name               = "2TierApplicationLoadBalancer"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public1.id, aws_subnet.public2.id]
  security_groups    = [aws_security_group.albsg.id]
}

# 
# Terraform configuration that defines an Amazon Web Services (AWS) security group.
/* Terraform will create a security group in the AWS region "us-east-1" with the name "albsg", 
the description "security group for alb", and the VPC ID "aws_vpc.main.id". The security group will allow all 
inbound traffic and all outbound traffic.*/
resource "aws_security_group" "albsg" {
  name        = "albsg"
  description = "security group for alb"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = "0"
    to_port     = "0"
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = "0"
    to_port     = "0"
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Terraform configuration that defines an Amazon Web Services (AWS) target group.
/*A target group is a collection of one or more instances that receive traffic from an Elastic Load Balancing 
(ELB) load balancer. */
resource "aws_lb_target_group" "tg" {
  name     = "projecttg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  depends_on = [aws_vpc.main]
}


# Terraform configuration that attaches an EC2 instance to an Elastic Load Balancing (ELB) target group
resource "aws_lb_target_group_attachment" "tgattach1" {
  target_group_arn = aws_lb_target_group.tg.arn
  target_id        = aws_instance.web_tier1.id
  port             = 80

  depends_on = [aws_instance.web_tier1]
}

# Terraform configuration that attaches an EC2 instance to an Elastic Load Balancing (ELB) target group
resource "aws_lb_target_group_attachment" "tgattach2" {
  target_group_arn = aws_lb_target_group.tg.arn
  target_id        = aws_instance.web_tier2.id
  port             = 80

  depends_on = [aws_instance.web_tier2]
}

# Terraform configuration that creates an Elastic Load Balancing (ELB) listener.
/*  Terraform will create an ELB listener on the load balancer with the port 80 and the protocol HTTP. Traffic received on the listener will be forwarded to the 
target group with the ARN aws_lb_target_group.tg.arn.*/
resource "aws_lb_listener" "listenerlb" {
  load_balancer_arn = aws_lb.myalb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}


# Terraform configuration that creates a public subnet in an Amazon Web Services (AWS) Virtual Private Cloud (VPC).
resource "aws_subnet" "public1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.10.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true

  tags = {
    Name = "public1"
  }
}

# Terraform configuration that creates a public subnet in an Amazon Web Services (AWS) Virtual Private Cloud (VPC).
resource "aws_subnet" "public2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.10.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true

  tags = {
    Name = "public2"
  }
}

# Terraform resource that creates a private subnet in an Amazon Web Services (AWS) VPC
resource "aws_subnet" "private1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.10.3.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = false

  tags = {
    Name = "private1"
  }
}

# Terraform resource that creates a private subnet in an Amazon Web Services (AWS) VPC
resource "aws_subnet" "private2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.10.4.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = false

  tags = {
    Name = "private2"
  }
}

# Terraform resource that creates an Amazon Relational Database Service (RDS) subnet group
/*it will create a new RDS subnet group. The subnet group will have the specified name 
and will contain the specified subnets*/
resource "aws_db_subnet_group" "sub_4_db" {
  name       = "sub_4_db"
  subnet_ids = [aws_subnet.private1.id, aws_subnet.private2.id]
  tags = {
    Name = "My DB subnet group"
  }
}

# Terraform resource that creates an internet gateway in an Amazon Web Services (AWS) VPC
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "InternetGateway2023"
  }
}

#Terraform resource that creates a route table in an Amazon Web Services (AWS) VPC.
/*It will create a new route table. The route table will be associated with the specified VPC. 
The route table will also contain a route that specifies that all traffic destined for the internet 
should be routed to the internet gateway.*/
resource "aws_route_table" "Web_Tier" {
  tags = {
    Name = "Web_Tier"
  }
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}


#  Terraform resource that associates a route table with a subnet in an Amazon Web Services (AWS) VPC.
/*It will associate the specified route table with the specified subnet. This will ensure that all 
traffic from instances launched in the subnet will be routed according to the routes in the route table.*/
resource "aws_route_table_association" "Web_tier" {
  subnet_id      = aws_subnet.public1.id
  route_table_id = aws_route_table.Web_Tier.id
}


# Terraform resource that associates a route table with a subnet in an Amazon Web Services (AWS) VPC.
/*It will associate the specified route table with the specified subnet. This will ensure that all 
traffic from instances launched in the subnet will be routed according to the routes in the route table.*/
resource "aws_route_table_association" "Web_tier2" {
  subnet_id      = aws_subnet.public2.id
  route_table_id = aws_route_table.Web_Tier.id
}


# Terraform resource that creates a route table in an Amazon Web Services (AWS) VPC. 
/* it will create a new route table. The route table will be associated with the specified VPC. 
The route table will also contain a route that specifies that all traffic destined for the internet 
should be routed to the internet gateway*/
resource "aws_route_table" "DabaseTier" {
  tags = {
    Name = "DatabaseTier"
  }
  vpc_id = aws_vpc.main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}


# Terraform resource that creates an Elastic IP address (EIP) in an Amazon Web Services (AWS) VPC.
resource "aws_eip" "nat_eip" {
  vpc = true
}

# Terraform resource that creates a NAT gateway in an Amazon Web Services (AWS) VPC
resource "aws_nat_gateway" "gw" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public2.id
}


# Terraform resource that creates a route table in an Amazon Web Services (AWS) VPC and associates it with a NAT gateway.
resource "aws_route_table" "my_public2_nated" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.gw.id
  }

  tags = {
    Name = "Main Route Table for NAT- subnet"
  }
}


# Terrafrom resource associates two subnets in an Amazon Web Services (AWS) VPC with a route table that is 
#configured for NAT.
/*It will associate the specified route table with the specified subnets. This will ensure that all traffic 
from instances launched in the subnets will be routed according to the routes in the route table.*/
resource "aws_route_table_association" "my_public2_nated1" {
  subnet_id      = aws_subnet.private1.id
  route_table_id = aws_route_table.my_public2_nated.id
}
resource "aws_route_table_association" "my_public2_nated2" {
  subnet_id      = aws_subnet.private2.id
  route_table_id = aws_route_table.my_public2_nated.id
}


# Terraform resource creates a security group in an Amazon Web Services (AWS) VPC and allows inbound 
#traffic on ports 22 (SSH) and 80 (HTTP).
/* It will create a new security group. The security group will be associated with the specified VPC. 
The security group will also contain the specified ingress and egress rules.*/
resource "aws_security_group" "web_tier" {
  name        = "web_tier"
  description = "web and SSH allowed"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


# Terraform resource creates a security group in an Amazon Web Services (AWS) VPC and allows inbound traffic 
#on port 3306 (MySQL) from the web tier security group and on port 22 (SSH) from anywhere. 
/* It will create a new security group. The security group will be associated with the specified VPC. 
The security group will also contain the specified ingress and egress rules */
resource "aws_security_group" "db_tier" {
  name        = "Database SecurityGroup 2023"
  description = "allow traffic from Web Tier & SSH"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    cidr_blocks     = ["10.10.0.0/16"]
    security_groups = [aws_security_group.web_tier.id]
  }
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]

  }
}

#Terraform configuration that defines an Amazon Relational Database Service (RDS) database instance
/*  An RDS database instance is a fully-managed database service that provides cost-efficient and resizable 
capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, 
patching and backups.  */
resource "aws_db_instance" "the_db" {
  allocated_storage      = 10
  engine                 = "MySQL"
  engine_version         = "5.7"
  instance_class         = "db.t2.micro"
  db_subnet_group_name   = aws_db_subnet_group.sub_4_db.id
  vpc_security_group_ids = [aws_security_group.db_tier.id]
  name                   = "database"
  username               = "username"
  password               = "password"
  parameter_group_name   = "default.mysql5.7"
  skip_final_snapshot    = true
}

